
Safev0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003fc  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800102  00800102  00000492  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000bf7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00000c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000034c  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000190  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001d0  00000000  00000000  00001162  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000016b  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002f8  00000000  00000000  000015df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  000018d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_1>
   8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  9e:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <groundAll>:
		
		
    }
}
void groundAll() {
	PORTD |= 1<<pin5v;
  a6:	5e 9a       	sbi	0x0b, 6	; 11
	PORTB &= ~(1<<pinLatch);
  a8:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<pinClock);
  aa:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<pinData);	
  ac:	2a 98       	cbi	0x05, 2	; 5
  ae:	08 95       	ret

000000b0 <resetPins>:
}
void resetPins() {
	PORTD &= ~(1<<pin5v);	
  b0:	5e 98       	cbi	0x0b, 6	; 11
  b2:	08 95       	ret

000000b4 <refreshDisplay>:
}
void refreshDisplay() {
  b4:	e8 e0       	ldi	r30, 0x08	; 8
  b6:	f1 e0       	ldi	r31, 0x01	; 1
	for (int i=0;i<4;i++) {
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
		PORTB &= ~(1<<pinLatch); //turn latch pin LOW
		
		for (int j=0;j<4;j++) {
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	a3 e0       	ldi	r26, 0x03	; 3
  c2:	b0 e0       	ldi	r27, 0x00	; 0
void resetPins() {
	PORTD &= ~(1<<pin5v);	
}
void refreshDisplay() {
	for (int i=0;i<4;i++) {
		PORTB &= ~(1<<pinLatch); //turn latch pin LOW
  c4:	28 98       	cbi	0x05, 0	; 5
		
		for (int j=0;j<4;j++) {
  c6:	cb 01       	movw	r24, r22
			if (i==j) {
  c8:	48 17       	cp	r20, r24
  ca:	59 07       	cpc	r21, r25
  cc:	11 f4       	brne	.+4      	; 0xd2 <refreshDisplay+0x1e>
				PORTB &= ~(1<<pinData);
  ce:	2a 98       	cbi	0x05, 2	; 5
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <refreshDisplay+0x20>
				} else {
				PORTB |= 1<<pinData;
  d2:	2a 9a       	sbi	0x05, 2	; 5
			}
			PORTB |= 1<<pinClock; //turn clock pin HIGH
  d4:	29 9a       	sbi	0x05, 1	; 5
			PORTB &= ~(1<<pinClock); //turn clock pin LOW
  d6:	29 98       	cbi	0x05, 1	; 5
}
void refreshDisplay() {
	for (int i=0;i<4;i++) {
		PORTB &= ~(1<<pinLatch); //turn latch pin LOW
		
		for (int j=0;j<4;j++) {
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	84 30       	cpi	r24, 0x04	; 4
  dc:	91 05       	cpc	r25, r1
  de:	a1 f7       	brne	.-24     	; 0xc8 <refreshDisplay+0x14>
  e0:	cd 01       	movw	r24, r26
			}
			PORTB |= 1<<pinClock; //turn clock pin HIGH
			PORTB &= ~(1<<pinClock); //turn clock pin LOW
		}
		for (int j=0;j<4;j++) {
			if ((num[i] & 1<<(3-j))==0) {
  e2:	20 81       	ld	r18, Z
  e4:	31 81       	ldd	r19, Z+1	; 0x01
  e6:	08 2e       	mov	r0, r24
  e8:	02 c0       	rjmp	.+4      	; 0xee <refreshDisplay+0x3a>
  ea:	35 95       	asr	r19
  ec:	27 95       	ror	r18
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <refreshDisplay+0x36>
  f2:	20 fd       	sbrc	r18, 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <refreshDisplay+0x46>
				PORTB &= ~(1<<pinData);
  f6:	2a 98       	cbi	0x05, 2	; 5
  f8:	01 c0       	rjmp	.+2      	; 0xfc <refreshDisplay+0x48>
				} else {
				PORTB |= 1<<pinData;
  fa:	2a 9a       	sbi	0x05, 2	; 5
			}
			PORTB |= 1<<pinClock; //turn clock pin HIGH
  fc:	29 9a       	sbi	0x05, 1	; 5
			PORTB &= ~(1<<pinClock); //turn clock pin LOW
  fe:	29 98       	cbi	0x05, 1	; 5
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	78 f7       	brcc	.-34     	; 0xe2 <refreshDisplay+0x2e>
		}
		PORTB |= 1<<pinLatch; //turn latch pin HIGH
 104:	28 9a       	sbi	0x05, 0	; 5
}
void resetPins() {
	PORTD &= ~(1<<pin5v);	
}
void refreshDisplay() {
	for (int i=0;i<4;i++) {
 106:	4f 5f       	subi	r20, 0xFF	; 255
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	32 96       	adiw	r30, 0x02	; 2
 10c:	44 30       	cpi	r20, 0x04	; 4
 10e:	51 05       	cpc	r21, r1
 110:	c9 f6       	brne	.-78     	; 0xc4 <refreshDisplay+0x10>
			PORTB |= 1<<pinClock; //turn clock pin HIGH
			PORTB &= ~(1<<pinClock); //turn clock pin LOW
		}
		PORTB |= 1<<pinLatch; //turn latch pin HIGH
	}	
}
 112:	08 95       	ret

00000114 <main>:
volatile const uint8_t sensCDir =3;
volatile uint8_t sens;
int main(void)
{	
	//initialize interrupts
	DDRD &= ~(1<<PIND2) &~(1<<PIND3); //make pin 2 & 3 an input
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	83 7f       	andi	r24, 0xF3	; 243
 118:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PIND2) |(1<<PIND3); //pull-up pin 2 & 3
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	8c 60       	ori	r24, 0x0C	; 12
 11e:	8b b9       	out	0x0b, r24	; 11
	
	EICRA |= (1<<ISC10) |(1<<ISC00); //Set interrupt on any logic change
 120:	e9 e6       	ldi	r30, 0x69	; 105
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	85 60       	ori	r24, 0x05	; 5
 128:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0) |(1<<INT1); //Turn on INT0 and INT1
 12a:	8d b3       	in	r24, 0x1d	; 29
 12c:	83 60       	ori	r24, 0x03	; 3
 12e:	8d bb       	out	0x1d, r24	; 29
	sei();
 130:	78 94       	sei
	//end initialize interrupts
	
	DDRD |= 1<<pin5v;
 132:	56 9a       	sbi	0x0a, 6	; 10
	DDRD &= ~(1<<pinEncoder0) &~(1<<pinEncoder1) &~(1<<pinEncoderButton);
 134:	8a b1       	in	r24, 0x0a	; 10
 136:	83 7e       	andi	r24, 0xE3	; 227
 138:	8a b9       	out	0x0a, r24	; 10
	
	PORTD &= ~(1<<pin5v);
 13a:	5e 98       	cbi	0x0b, 6	; 11
	PORTD |= (1<<pinEncoder0) |(1<<pinEncoder1) |(1<<pinEncoderButton); //pull-up input pins
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	8c 61       	ori	r24, 0x1C	; 28
 140:	8b b9       	out	0x0b, r24	; 11
	//PORTD |= (1<<pinEncoderButton); //pull-up input pins
	
	DDRB |= 1<<pinLatch |1<<pinClock |1<<pinData;
 142:	84 b1       	in	r24, 0x04	; 4
 144:	87 60       	ori	r24, 0x07	; 7
 146:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0b00000000;
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	85 b9       	out	0x05, r24	; 5
	
	num[0] = 2;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 09 01 	sts	0x0109, r25
 154:	80 93 08 01 	sts	0x0108, r24
	num[1] = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 0b 01 	sts	0x010B, r25
 160:	80 93 0a 01 	sts	0x010A, r24
	num[2] = 9;
 164:	89 e0       	ldi	r24, 0x09	; 9
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 0d 01 	sts	0x010D, r25
 16c:	80 93 0c 01 	sts	0x010C, r24
	num[3] = 3;
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 0f 01 	sts	0x010F, r25
 178:	80 93 0e 01 	sts	0x010E, r24
				} else {
					sleepMode = 1;
					groundAll();
				}
			}
			lastButtonState = 1;
 17c:	c1 e0       	ldi	r28, 0x01	; 1
 17e:	d0 e0       	ldi	r29, 0x00	; 0
			if (lastButtonState!=1) {
				if (sleepMode) {
					sleepMode = 0;	
					resetPins();				
				} else {
					sleepMode = 1;
 180:	11 e0       	ldi	r17, 0x01	; 1
	num[2] = 9;
	num[3] = 3;
	
    while(1)
    {
		if (sleepMode==0) {
 182:	80 91 06 01 	lds	r24, 0x0106
 186:	81 11       	cpse	r24, r1
 188:	02 c0       	rjmp	.+4      	; 0x18e <main+0x7a>
			refreshDisplay();			
 18a:	0e 94 5a 00 	call	0xb4	; 0xb4 <refreshDisplay>
		}
		if (bit_is_clear(PIND, pinEncoderButton)) {
 18e:	4c 99       	sbic	0x09, 4	; 9
 190:	18 c0       	rjmp	.+48     	; 0x1c2 <main+0xae>
			if (lastButtonState!=1) {
 192:	80 91 04 01 	lds	r24, 0x0104
 196:	90 91 05 01 	lds	r25, 0x0105
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	69 f0       	breq	.+26     	; 0x1b8 <main+0xa4>
				if (sleepMode) {
 19e:	80 91 06 01 	lds	r24, 0x0106
 1a2:	88 23       	and	r24, r24
 1a4:	29 f0       	breq	.+10     	; 0x1b0 <main+0x9c>
					sleepMode = 0;	
 1a6:	10 92 06 01 	sts	0x0106, r1
					resetPins();				
 1aa:	0e 94 58 00 	call	0xb0	; 0xb0 <resetPins>
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <main+0xa4>
				} else {
					sleepMode = 1;
 1b0:	10 93 06 01 	sts	0x0106, r17
					groundAll();
 1b4:	0e 94 53 00 	call	0xa6	; 0xa6 <groundAll>
				}
			}
			lastButtonState = 1;
 1b8:	d0 93 05 01 	sts	0x0105, r29
 1bc:	c0 93 04 01 	sts	0x0104, r28
 1c0:	e0 cf       	rjmp	.-64     	; 0x182 <main+0x6e>
		} else {
			lastButtonState = 0;
 1c2:	10 92 05 01 	sts	0x0105, r1
 1c6:	10 92 04 01 	sts	0x0104, r1
 1ca:	db cf       	rjmp	.-74     	; 0x182 <main+0x6e>

000001cc <setNum>:
	} else {
		setNum(segment, num[segment]+1);
	}
}
void setNum(uint8_t segment, uint8_t num_) {
	num[segment] = num_;
 1cc:	e8 2f       	mov	r30, r24
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	e8 5f       	subi	r30, 0xF8	; 248
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	60 83       	st	Z, r22
 1da:	11 82       	std	Z+1, r1	; 0x01
 1dc:	08 95       	ret

000001de <addNum>:
	}
	
	lastEncoded = encoded; //store this value for next time
}
void addNum(uint8_t segment) {
	if (num[segment]>=9) {
 1de:	e8 2f       	mov	r30, r24
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	ee 0f       	add	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	e8 5f       	subi	r30, 0xF8	; 248
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	60 81       	ld	r22, Z
 1ec:	71 81       	ldd	r23, Z+1	; 0x01
 1ee:	69 30       	cpi	r22, 0x09	; 9
 1f0:	71 05       	cpc	r23, r1
 1f2:	24 f0       	brlt	.+8      	; 0x1fc <addNum+0x1e>
		setNum(segment, 0);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <setNum>
 1fa:	08 95       	ret
	} else {
		setNum(segment, num[segment]+1);
 1fc:	6f 5f       	subi	r22, 0xFF	; 255
 1fe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <setNum>
 202:	08 95       	ret

00000204 <updateEncoder>:
ISR(INT1_vect) {
	updateEncoder();
	refreshDisplay();
}

void updateEncoder() {
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
	int MSB = bit_is_clear(PIND, pinEncoder0); //MSB = most significant bit
 208:	69 b1       	in	r22, 0x09	; 9
	int LSB = bit_is_clear(PIND, pinEncoder1); //LSB = least significant bit
 20a:	59 b1       	in	r21, 0x09	; 9
	updateEncoder();
	refreshDisplay();
}

void updateEncoder() {
	int MSB = bit_is_clear(PIND, pinEncoder0); //MSB = most significant bit
 20c:	66 95       	lsr	r22
 20e:	66 95       	lsr	r22
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	64 27       	eor	r22, r20
 214:	26 2f       	mov	r18, r22
 216:	21 70       	andi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
	int LSB = bit_is_clear(PIND, pinEncoder1); //LSB = least significant bit

	int encoded = (MSB << 1) |LSB; //converting the 2 pin value to single number
 21a:	e9 01       	movw	r28, r18
 21c:	cc 0f       	add	r28, r28
 21e:	dd 1f       	adc	r29, r29
	refreshDisplay();
}

void updateEncoder() {
	int MSB = bit_is_clear(PIND, pinEncoder0); //MSB = most significant bit
	int LSB = bit_is_clear(PIND, pinEncoder1); //LSB = least significant bit
 220:	25 2f       	mov	r18, r21
 222:	26 95       	lsr	r18
 224:	26 95       	lsr	r18
 226:	26 95       	lsr	r18
 228:	42 27       	eor	r20, r18
 22a:	84 2f       	mov	r24, r20
 22c:	81 70       	andi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0

	int encoded = (MSB << 1) |LSB; //converting the 2 pin value to single number
 230:	c8 2b       	or	r28, r24
 232:	d9 2b       	or	r29, r25
	int sum  = (lastEncoded << 2) | encoded; //adding it to the previous encoded value
 234:	80 91 11 01 	lds	r24, 0x0111
 238:	90 91 12 01 	lds	r25, 0x0112
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	8c 2b       	or	r24, r28
 246:	9d 2b       	or	r25, r29

	if(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) {
 248:	8d 30       	cpi	r24, 0x0D	; 13
 24a:	91 05       	cpc	r25, r1
 24c:	49 f0       	breq	.+18     	; 0x260 <updateEncoder+0x5c>
 24e:	84 30       	cpi	r24, 0x04	; 4
 250:	91 05       	cpc	r25, r1
 252:	31 f0       	breq	.+12     	; 0x260 <updateEncoder+0x5c>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	91 05       	cpc	r25, r1
 258:	19 f0       	breq	.+6      	; 0x260 <updateEncoder+0x5c>
 25a:	8b 30       	cpi	r24, 0x0B	; 11
 25c:	91 05       	cpc	r25, r1
 25e:	d9 f4       	brne	.+54     	; 0x296 <updateEncoder+0x92>
		if (dir ==1) {
 260:	80 91 03 01 	lds	r24, 0x0103
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	29 f4       	brne	.+10     	; 0x272 <updateEncoder+0x6e>
			//changeEncoded = 1;
			
			sensDir=sensCDir;
 268:	80 91 00 01 	lds	r24, 0x0100
 26c:	80 93 01 01 	sts	0x0101, r24
 270:	3d c0       	rjmp	.+122    	; 0x2ec <updateEncoder+0xe8>
			// Serial.println("0RIGHT");
		} else if (sensDir==0) {
 272:	80 91 01 01 	lds	r24, 0x0101
 276:	81 11       	cpse	r24, r1
 278:	08 c0       	rjmp	.+16     	; 0x28a <updateEncoder+0x86>
			dir=1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 03 01 	sts	0x0103, r24
			sensDir=sensCDir;
 280:	80 91 00 01 	lds	r24, 0x0100
 284:	80 93 01 01 	sts	0x0101, r24
 288:	31 c0       	rjmp	.+98     	; 0x2ec <updateEncoder+0xe8>
			//     Serial.println("1RIGHT");
		} else {
			sensDir--;
 28a:	80 91 01 01 	lds	r24, 0x0101
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	80 93 01 01 	sts	0x0101, r24
 294:	2b c0       	rjmp	.+86     	; 0x2ec <updateEncoder+0xe8>
		}
	} else if(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) {
 296:	8e 30       	cpi	r24, 0x0E	; 14
 298:	91 05       	cpc	r25, r1
 29a:	41 f0       	breq	.+16     	; 0x2ac <updateEncoder+0xa8>
 29c:	87 30       	cpi	r24, 0x07	; 7
 29e:	91 05       	cpc	r25, r1
 2a0:	29 f0       	breq	.+10     	; 0x2ac <updateEncoder+0xa8>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	91 05       	cpc	r25, r1
 2a6:	11 f0       	breq	.+4      	; 0x2ac <updateEncoder+0xa8>
 2a8:	08 97       	sbiw	r24, 0x08	; 8
 2aa:	d9 f4       	brne	.+54     	; 0x2e2 <updateEncoder+0xde>
		if (dir==2) {
 2ac:	80 91 03 01 	lds	r24, 0x0103
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	29 f4       	brne	.+10     	; 0x2be <updateEncoder+0xba>
			//changeEncoded = 1;
			sensDir=sensCDir;
 2b4:	80 91 00 01 	lds	r24, 0x0100
 2b8:	80 93 01 01 	sts	0x0101, r24
 2bc:	17 c0       	rjmp	.+46     	; 0x2ec <updateEncoder+0xe8>
			//    Serial.println("0LEFT");
		} else if (sensDir==0) {
 2be:	80 91 01 01 	lds	r24, 0x0101
 2c2:	81 11       	cpse	r24, r1
 2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <updateEncoder+0xd2>
			dir=2;
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	80 93 03 01 	sts	0x0103, r24
			sensDir=sensCDir;
 2cc:	80 91 00 01 	lds	r24, 0x0100
 2d0:	80 93 01 01 	sts	0x0101, r24
 2d4:	0b c0       	rjmp	.+22     	; 0x2ec <updateEncoder+0xe8>
			//   Serial.println("1LEFT");
		} else {
			sensDir--;
 2d6:	80 91 01 01 	lds	r24, 0x0101
 2da:	81 50       	subi	r24, 0x01	; 1
 2dc:	80 93 01 01 	sts	0x0101, r24
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <updateEncoder+0xe8>
		}
	} else {
		lastEncoded = encoded; //store this value for next time
 2e2:	d0 93 12 01 	sts	0x0112, r29
 2e6:	c0 93 11 01 	sts	0x0111, r28
		return; // return, no change will be made to the numbers
 2ea:	37 c0       	rjmp	.+110    	; 0x35a <updateEncoder+0x156>
	}
	if (sens<=0) {
 2ec:	80 91 10 01 	lds	r24, 0x0110
 2f0:	81 11       	cpse	r24, r1
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <updateEncoder+0xf8>
		sens = rotSens;
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	80 93 10 01 	sts	0x0110, r24
 2fa:	2b c0       	rjmp	.+86     	; 0x352 <updateEncoder+0x14e>
		} else if (sens==rotSens) {
 2fc:	80 91 10 01 	lds	r24, 0x0110
 300:	83 30       	cpi	r24, 0x03	; 3
 302:	11 f5       	brne	.+68     	; 0x348 <updateEncoder+0x144>
		sens--;
 304:	80 91 10 01 	lds	r24, 0x0110
 308:	81 50       	subi	r24, 0x01	; 1
 30a:	80 93 10 01 	sts	0x0110, r24
		if (lastDir!=dir) {
 30e:	90 91 02 01 	lds	r25, 0x0102
 312:	80 91 03 01 	lds	r24, 0x0103
 316:	98 17       	cp	r25, r24
 318:	91 f0       	breq	.+36     	; 0x33e <updateEncoder+0x13a>
			if (lastDir!=0) {
 31a:	80 91 02 01 	lds	r24, 0x0102
 31e:	88 23       	and	r24, r24
 320:	51 f0       	breq	.+20     	; 0x336 <updateEncoder+0x132>
				if (currNum==3) {
 322:	80 91 07 01 	lds	r24, 0x0107
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	19 f4       	brne	.+6      	; 0x330 <updateEncoder+0x12c>
					//	} else {
					//	Serial.println("DENIED");
					//	resetDisplay(false);
					//	lock(true);
				//	}
					currNum = 0;
 32a:	10 92 07 01 	sts	0x0107, r1
 32e:	03 c0       	rjmp	.+6      	; 0x336 <updateEncoder+0x132>
					} else {
					//if (!lockState) {
						currNum++;
 330:	8f 5f       	subi	r24, 0xFF	; 255
 332:	80 93 07 01 	sts	0x0107, r24
					//}
				}
			}
			lastDir = dir;
 336:	80 91 03 01 	lds	r24, 0x0103
 33a:	80 93 02 01 	sts	0x0102, r24
		}
		addNum(currNum);
 33e:	80 91 07 01 	lds	r24, 0x0107
 342:	0e 94 ef 00 	call	0x1de	; 0x1de <addNum>
 346:	05 c0       	rjmp	.+10     	; 0x352 <updateEncoder+0x14e>
	} else {
	sens--;
 348:	80 91 10 01 	lds	r24, 0x0110
 34c:	81 50       	subi	r24, 0x01	; 1
 34e:	80 93 10 01 	sts	0x0110, r24
	}
	
	lastEncoded = encoded; //store this value for next time
 352:	d0 93 12 01 	sts	0x0112, r29
 356:	c0 93 11 01 	sts	0x0111, r28
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <__vector_2>:

ISR(INT0_vect) {
	updateEncoder();
	refreshDisplay();
}
ISR(INT1_vect) {
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
	updateEncoder();
 382:	0e 94 02 01 	call	0x204	; 0x204 <updateEncoder>
	refreshDisplay();
 386:	0e 94 5a 00 	call	0xb4	; 0xb4 <refreshDisplay>
}
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	7f 91       	pop	r23
 398:	6f 91       	pop	r22
 39a:	5f 91       	pop	r21
 39c:	4f 91       	pop	r20
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <__vector_1>:
		}
		PORTB |= 1<<pinLatch; //turn latch pin HIGH
	}	
}

ISR(INT0_vect) {
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	2f 93       	push	r18
 3b8:	3f 93       	push	r19
 3ba:	4f 93       	push	r20
 3bc:	5f 93       	push	r21
 3be:	6f 93       	push	r22
 3c0:	7f 93       	push	r23
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
	updateEncoder();
 3ce:	0e 94 02 01 	call	0x204	; 0x204 <updateEncoder>
	refreshDisplay();
 3d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <refreshDisplay>
}
 3d6:	ff 91       	pop	r31
 3d8:	ef 91       	pop	r30
 3da:	bf 91       	pop	r27
 3dc:	af 91       	pop	r26
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	7f 91       	pop	r23
 3e4:	6f 91       	pop	r22
 3e6:	5f 91       	pop	r21
 3e8:	4f 91       	pop	r20
 3ea:	3f 91       	pop	r19
 3ec:	2f 91       	pop	r18
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
